#!/bin/bash
#
# test p2 compile and run
#

echo
echo -n testing p2 ...

#Compiling pcomp to intermediate code
echo compiling p2/pcomp ...
compile p2/pcomp
cat p2/pcomp.err
#
# Copy the test file to the input file and compile it via interpreted p2
#
cp p2/roman.pas p2/pcomp.inp
run p2/pcomp
cat p2/pcomp.lst
#
# For neatness sake, copy out the intermediate to .p2 file
#
cp p2/pcomp.out p2/roman.p2
#
# Compile pasint to intermediate code
#
echo -n Compiling pasint ...
compile p2/pasint
#
# Add the final target program to the end of pasint.
# This means that the version of pint will read and interpret
# this.
#
# For those of you having fun reading this, yes, the next statement accurately
# describes what is going on: we are concatenating and running two different
# intermediate codes together in completely different formats!
#
cat p2/pasint.p5 p2/roman.p2 > tmp.p5
rm -f p2/pasint.p5
mv tmp.p5 p2/pasint.p5
#
# Create null input file
#
echo > p2/pasint.inp
#
# Now run pasint on pint, which runs the test program.
#
echo -n Running pasint on pint ...
run p2/pasint
#
# Copy the result listing back to roman.lst, again for neatness
#
cp p2/pasint.lst p2/roman.lst
#
# Now compare with reference
#
echo -n checking ...
diffnole p2/roman.lst p2/roman.cmp > p2/roman.dif
#
## pass if diff file is empty
if test -s p2/roman.dif; then
    echo FAIL
else
    echo PASS
fi

rm -f p2/pcomp.inp
rm -f p2/pasint.inp
